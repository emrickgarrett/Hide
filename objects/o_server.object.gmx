<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup the server

// CONSTANTS
TEST = 0;
KEY = 1;
MOUSE = 2;
KILLER = 3;
HIDER1 = 4;
HIDER2 = 5;
TIMER = 6;
KEY_RELEASED = 7;
GAME_OVER = 8;
CRUZ = 9;
HIDERS = 10;
CHAR = 11;
SND = 12;
MAP = 13;

map = get_integer("Enter a map number 1-4", 1);


// Variables
max_clients = 3; // Only 3 players are in game
default_port = 6510;
port = default_port;
type = network_socket_tcp;
IP = -1; // Get the IP of the server to send to user, no idea how to do this atm
socket_list = ds_list_create();
sock = -4

server_socket = network_create_server(type, port, max_clients);

if server_socket &lt; 0{
    //connection error
    while(server_socket &lt; 0 and port &lt; default_port + 1000){
        port++;
        server_socket = network_create_server(type, port, max_clients);
    }
}

if server_socket &gt;= 0{
    //Server connected, run the code
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gameplay variables

gameStart = 0;
debug = 0;
first_run = 1;
load_map = 0;



//Go to the correct map
switch(map){
    case 2:
        room_goto(r_house2);
        break;
    case 3:
        room_goto(r_house4);
        break;
    case 4:
        room_goto(r_maze);
        break;
    default:
        room_goto(r_house3);
    break;    

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Determine number of players (will still spawn 3 however)

num_players = get_integer("Please Enter number of players between 2-3", 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy all the socks!

for(var i = 0; i &lt; ds_list_size(socket_list); i++){
    network_destroy(ds_list_find_value(socket_list, i));
}

network_destroy(server_socket);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// They survived!

var buffer = buffer_create(256, buffer_grow, 1);
buffer_seek(buffer, buffer_seek_start, 0);
buffer_write(buffer, buffer_u16, GAME_OVER);
buffer_write(buffer, buffer_u16, HIDERS);
    
snd_packet_clients(socket_list, buffer);
buffer_delete(buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start game

if(first_run){
    snd_clients_id(socket_list);
    alarm[0] = 10;
    first_run = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play sound

if(!audio_is_playing(whacky_bird)){
    audio_play_sound(whacky_bird, 1, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Send Killer location data
var buffer = buffer_create(256, buffer_grow, 1);
buffer_seek(buffer, buffer_seek_start, 0);
buffer_write(buffer, buffer_u16, KILLER);
buffer_write(buffer, buffer_u16, o_killer.x);
buffer_write(buffer, buffer_u16, o_killer.y);
buffer_write(buffer, buffer_u32, o_killer.image_angle);

snd_packet_clients(socket_list, buffer);
buffer_delete(buffer);

//Send Hider1 Location data
if(instance_exists(o_hider)){
    buffer = buffer_create(256, buffer_grow, 1);
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_u16, HIDER1);
    buffer_write(buffer, buffer_u16, o_hider.x);
    buffer_write(buffer, buffer_u16, o_hider.y);
    buffer_write(buffer, buffer_u32, o_hider.image_angle);
    
    snd_packet_clients(socket_list, buffer);
    buffer_delete(buffer);
}

//Send Hider2 Location data
if(instance_exists(o_hider2)){
    buffer = buffer_create(256, buffer_grow, 1);
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_u16, HIDER2);
    buffer_write(buffer, buffer_u16, o_hider2.x);
    buffer_write(buffer, buffer_u16, o_hider2.y);
    buffer_write(buffer, buffer_u32, o_hider2.image_angle);
    
    snd_packet_clients(socket_list, buffer);
    buffer_delete(buffer);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gameover conditions

if(!instance_exists(o_hider) and !instance_exists(o_hider2)){
    var buffer = buffer_create(256, buffer_grow, 1);
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_u16, GAME_OVER);
    buffer_write(buffer, buffer_u16, CRUZ);
    
    snd_packet_clients(socket_list, buffer);
    buffer_delete(buffer);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Don't start game until there are 3 players

if(ds_list_size(socket_list) &gt;= num_players or debug){
    gameStart = 1;
    /// Send data to le clients (Make dat $$$)
    if(!load_map){
        send_client_map(socket_list, map); 
        load_map = 1;
        alarm[1] = 5;
        alarm[2] = 2700;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Send data to clients

var t_buffer = buffer_create(256, buffer_grow, 1);

buffer_seek(t_buffer, buffer_seek_start, 0);
buffer_write(t_buffer, buffer_u16, TEST);
buffer_write(t_buffer, buffer_string, "SWAG");
// More data

snd_packet_clients(socket_list, t_buffer);
buffer_delete(t_buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detect client connections

var n_id = ds_map_find_value(async_load, "id");
if server_socket == n_id{
    var t = ds_map_find_value(async_load, "type"); 
    
    switch(t){                            //get the type of network event
        case network_type_connect:                               //get the socket id of the connection
            sock = ds_map_find_value(async_load, "socket"); //and store it in a variable
            ds_list_add(socket_list, sock);                      //then write it to a ds_list for future reference
            show_debug_message("Client Connected!!!");
            break;
        case network_type_disconnect:
            sock = ds_map_find_value(async_load, "socket");
            ds_map_delete(socket_list, sock);
            show_debug_message("Client Disconnected!!!");
            break;
        case network_type_data:
            //Data handling here
            
            break;
    }
}


for(var i = 0; i &lt; ds_list_size(socket_list); i++){
    sock = ds_list_find_value(socket_list, i);
    if(n_id == sock){
        var buffer = ds_map_find_value(async_load, "buffer");
        var socket = ds_map_find_value(async_load, "id");
        var inst = ds_list_find_index(socket_list, socket );
        buffer_seek(buffer, buffer_seek_start, 0);
        ReceivedPacket(buffer, socket, inst);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
