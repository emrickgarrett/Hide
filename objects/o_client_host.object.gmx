<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup the client!

// CONSTANTS
TEST = 0;
KEY = 1;
MOUSE = 2;

// Variables
type = network_socket_tcp;
PORT = 6510;// Post server port here.
IP = "127.0.0.1"; // Post server IP here.

client_socket = network_create_socket(type);
server = network_connect(client_socket, IP, PORT);
if server &lt; 0 {
    //No connection, get rekt
    show_debug_message("Not connected");
} else{
    //Connected like a sunnofabitch
    show_debug_message("connected");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send data to the server
/*
var t_buffer = buffer_create(256, buffer_grow, 1);
buffer_seek(t_buffer, buffer_seek_start, 0);
buffer_write(t_buffer, buffer_u16, TEST);
buffer_write(t_buffer, buffer_string, "SWIGG");
//More data here...
var result = network_send_packet(client_socket, t_buffer, buffer_tell(t_buffer));
buffer_delete(t_buffer);
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send Keystrokes to server

var keyPressed = 0;
var buffer = buffer_create(256, buffer_grow, 1);
buffer_seek(buffer, buffer_seek_start, 0);
buffer_write(buffer, buffer_u16, KEY);
var length = 0;
var arr;

if(keyboard_check(ord("W")))
{
    keyPressed = 1;
    arr[length] = "W";
    length++;
}
if(keyboard_check(ord("S")))
{
    keyPressed = 1;
    arr[length] = "S";
    length++;
}
if(keyboard_check(ord("A")))
{
    keyPressed = 1;
    arr[length] = "A";
    length++;
}
if(keyboard_check(ord("D")))
{
    keyPressed = 1;
    arr[length] = "D";
    length++;
}

if(keyPressed){
    //Write Buffer
    buffer_write(buffer, buffer_u16, length);
    for(i = 0; i &lt; length; i++){
        buffer_write(buffer, buffer_string, arr[i]);
    }
    snd_packet_server(client_socket, buffer);
}

buffer_delete(buffer);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send mouse locations to server

var buffer = buffer_create(256, buffer_grow, 1);
buffer_seek(buffer, buffer_seek_start, 0);
buffer_write(buffer, buffer_u16, MOUSE);
buffer_write(buffer, buffer_u16, mouse_x);
buffer_write(buffer, buffer_u16, mouse_y);
snd_packet_server(client_socket, buffer);
buffer_delete(buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Send data to clients

var t_buffer = buffer_create(256, buffer_grow, 1);

buffer_seek(t_buffer, buffer_seek_start, 0);
buffer_write(t_buffer, buffer_u16, TEST);
buffer_write(t_buffer, buffer_string, "SWIGG");
// More data

network_send_packet(client_socket, t_buffer, buffer_tell(t_buffer));
buffer_delete(t_buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Listen for data from server
var n_id = ds_map_find_value(async_load, "id");
if n_id == client_socket{
    //We have a new packet from the server
    var t_buffer = ds_map_find_value(async_load, "buffer");
    if(t_buffer &gt;= 0){
        var cmd_type = buffer_read(t_buffer, buffer_u16);
        switch(cmd_type){
            case KEY:
                // A key has been pressed
            break;
            case TEST:
                show_debug_message("Packet Received");
                show_debug_message(buffer_read(t_buffer, buffer_string));
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
